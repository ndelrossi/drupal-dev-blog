<?php

/**
 * @file
 * Installation and uninstallation functions for the GeSHi filter.
 */

// Necessary for URL.
use Drupal\Core\Url;

use \Drupal\geshifilter\GeshiFilterCss;
use \Drupal\geshifilter\GeshiFilter;

/**
 * Implements hook_install().
 */
function geshifilter_install() {
  drupal_set_message(t('GeSHi filter is installed. You should now
    <a href="!geshi_admin">configure the GeSHi filter</a> and enable it in the
    desired <a href="!input_formats">text formats</a>.',
    array(
      // Can not use URL::fromRoute() because routes are not available here.
      '!geshi_admin' => '/admin/config/content/formats/geshifilter',
      '!input_formats' => '/admin/config/content/formats',
    )
  ));
}

/**
 * Implements hook_requirements().
 */
function geshifilter_requirements($phase) {
  $config = \Drupal::config('geshifilter.settings');
  $requirements = array();
  if ($phase == 'runtime') {
    require_once drupal_get_path('module', 'geshifilter') . '/geshifilter.inc';
    // Check if GeSHi library is available.
    $geshi_library = libraries_load('geshi');
    if (!$geshi_library['loaded']) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library not found.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    elseif (($version = explode('.', GESHI_VERSION)) && !($version[0] == '1' && $version[1] == '0')) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library invalid version.'),
        'description' => t('The detected version of GeSHi library (%version) is not supported. A version from the 1.0.x branch is required.', array('%version' => GESHI_VERSION)),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        // GESHI_VERSION is defined in GeSHi library.
        'value' => t('Found GeSHi library version %version',
          array('%version' => GESHI_VERSION)),
        'severity' => REQUIREMENT_OK,
      );
    }

    // Warn if GeSHi filter is configured to automatically managed external
    // stylesheet when it's not possible.
    if ($config->get('css_mode') == Geshifilter::CSS_CLASSES_AUTOMATIC && !GeshifilterCss::managedExternalStylesheetPossible()) {

      $requirements[] = array(
        'title' => 'GeSHi filter CSS mode',
        'value' => t('GeSHi filter can not automatically manage an external style sheet when the download method is private.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Change the CSS mode of the <a href="!geshi">GeSHi filter</a> or change the <a href="!filesystem">download mode</a> to public.',
          array(
            '!geshi' => URL::fromRoute('geshifilter.settings')->toString(),
            '!filesystem' => URL::fromRoute('system.file_system_settings')->toString(),
          )),
      );
    }

    // Check for filter conflicts.
    if (count(\Drupal\geshifilter\GeshiFilterConflicts::listConflicts()) > 0) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Some filter conflicts were detected.'),
        'description' => \Drupal::l('View and resolve the detected filter conflicts',
          URL::fromRoute('geshifilter.settings_filter_conflicts')),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}
